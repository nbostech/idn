/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// gradle clean
// gradle generatePomFileForApiModelPublication
// gradle aMJar aMSJar aMDJar sAMJar sAMSJar sAMDJar myTask publishApiModelPublicationToProjRepoRepository

// gradle clean
// gradle aMJar aMSJar aMDJar sAMJar sAMSJar sAMDJar gPomFileFAMP
// gradle --rerun-tasks signApiModelPomF
// gradle pAMPublicationToProjR
// gradle pAMPublicationToNbosMavenR
// gradle pAMPublicationToMaven2R

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'jvm-component'
apply plugin: 'java-lang'

group = 'in.wavelabs'
version = '0.2'

dependencies {
   compile 'commons-collections:commons-collections:3.2.2'
}

repositories {
    mavenCentral()
}

ext {
    apiModelPomFile = file("${project.projectDir}/build/publications/apiModel/pom-default.xml")
    signedApiModelPomFile = file("${project.projectDir}/build/publications/apiModel/pom-default.xml.asc")
}

// avoids duplicates in a jar file
tasks.withType(Jar) {
    eachFile {
        it.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

sourceSets {
    apiModel {
        java {
            srcDir 'src/apiModel/java'
        }
        resources {
            srcDir 'src/apiModel/resources'
        }
    }
}

task apiModelDocs(type: Javadoc) {
    source = sourceSets.apiModel.java
}

task apiModelJar(type: Jar, dependsOn:[classes]){
    baseName = 'api-model'
    from sourceSets.apiModel.output
}

task apiModelSourceJar(type: Jar){
    baseName = 'api-model-sources'
    from(sourceSets.apiModel.java)
}

task apiModelDocsJar(type: Jar, dependsOn: apiModelDocs) {
    baseName = 'api-model-javadoc'
    from apiModelDocs.destinationDir
}

signing {
    sign apiModelJar
    sign apiModelSourceJar
    sign apiModelDocsJar
}

task signApiModelPomFile(type:Sign){
    sign project.ext.apiModelPomFile
}

def signedFiles = {
    ["signApiModelJar","signApiModelSourceJar","signApiModelDocsJar"].collectMany {
        project.tasks."${it}".signatureFiles.collect { it }
    }
}

def appendDependencies = { pomNode ->
    def dependenciesNode = pomNode.getAt("dependencies")

    if(dependenciesNode) { dependenciesNode=dependenciesNode[0] }
    else { dependenciesNode = pomNode.appendNode('dependencies') }

    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
    configurations.compile.allDependencies.each {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', it.group)
        dependencyNode.appendNode('artifactId', it.name)
        dependencyNode.appendNode('version', it.version)
    }
}

publishing {
    publications {
        apiModel(MavenPublication) {
            artifactId 'api-model'
            artifact(apiModelJar) {
            }
            artifact(apiModelSourceJar) {
                classifier "sources"
            }
            artifact(apiModelDocsJar) {
                classifier "javadoc"
            }
            signedFiles().each { signedFile ->
                artifact (signedFile) {
                    def fileName=signedFile.name
                    classifier = fileName.contains("-sources") ? "sources" : (fileName.contains("-javadoc")?'javadoc':null)
                    extension  = 'jar.asc'
                }
            }
            if (project.ext.signedApiModelPomFile) {
                artifact (project.ext.signedApiModelPomFile) {
                    classifier = null
                    extension  = 'pom.asc'
                }
            }
            pom.withXml {
                asNode().appendNode('description',
                                    'A demonstration of maven ApiModel customization')
                appendDependencies(asNode())
            }
        }
    }
    repositories {
        maven {
            name 'maven2'
            credentials {
                username = "wavelabs"
                password = "Zq952FI6o7Pz"
            }
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        }
        maven {
            name 'projRepo'
            url "file:/${project.projectDir}/build/repo"
        }
        maven {
            name 'nbosMaven'
            //url "http://nexus1.nbostech.com:8081/nexus/content/repositories/wavelabs"
            url "http://nexus1.nbostech.com:8081/nexus/content/repositories/wavelabs-snapshot"
            credentials {
                username = "admin"
                password = "admin123"
            }
        }
    }
}


task myTask << {
    signedFiles().each {
        println "signedfile: ${it}"
    }
}

// gradle build
//    - build/classes/
//    - build/libs/idn-model-1.0.jar

// gradle generatePomFileForIdnModelPublication
//    - build/publications/idnModel/pom-default.xml

// gradle publishIdnModelPublicationToProjRepoRepository
//    - build/repo/in/wavelabs/idn-model/1.0/idn-model-1.0.jar

// gradle clean apiModelJar apiModelSourceJar apiModelDocsJar sAMJ sAMSJ sAMDJ myTask publishApiModelPublicationToProjRepoRepository

// gradle clean
// gradle aMJar aMSJar aMDJar sAMJar sAMSJar sAMDJar myTask publishApiModelPublicationToProjRepoRepository



//task learnGradle << {
//  println 'dump :' + project.configurations.getAll().dump()
//  println 'artifacts:'
//  configurations.default.allArtifacts.each {
//    println "  : ${it.name} , ${it.getFile().name}"
//  }
//  println 'compile:'
//  configurations.compile.each {
//    println "  : ${it.class.name} ${it.name}"
//  }
//
//  println 'components'
//  println "  : ${components.class.name}"
//  components.each {
//    println "     : ${it.class.name} ${it.name}"
//  }
//
//  println 'sourceSets'
//  println "  : ${sourceSets.class.name}"
//  sourceSets.each { SourceSet sourceSet ->
//    println "     : ${sourceSet.name}"
//    println "       all-sources"
//    sourceSet.getAllSource().getSrcDirs().each { d ->
//      println "         :dir:${d.name}"
//    }
///*
//    println "       groovy-sources"
//    sourceSet.getAllGroovy().getSrcDirs().each { d ->
//      println "         :dir:${d.name}"
//    }
//*/
//  }
///*
//  println 'archives:'
//  configurations.archives.each {
//    println "  : ${it}"
//  }
//*/
//}


